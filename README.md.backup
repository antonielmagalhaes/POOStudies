# POOStudies
Repositório para gerenciar meus estudos sobre Programação orientada a objetos <br/>
Repository to maintain my studies about object-oriented programming


# OOP

Is a programming parading centered around objects rather than functions 

> There are several languages that supports object oriented programming
>
> C#, Java, Ruby, Python, JavaScript, ...

Object oriented programming is absolutely necessary if you want to be a seriously developer you need to understand OOP (Object-oriented Programming).

# OOP Principles

Before object-oriented programming we have procedural programming, that divide the program into a set of functions, these functions operate on the data. This part of program is very simple and straightforward. But, as your program grow the number of functions grow, and then there functions for all the place, that paradigm programming __exists a lot of interdependence of code__. Object-oriented Programming came to solve this problem, OOP combine a group of variables and functions into a unity.


__4 Pillars of Object-oriented Programming__

- Encapsulation
- Abstraction
- Inheritance
- Polymorphism

## Benefits of OOP

> ***Encapsulation*** = Reduce complexity + increase reusability 
>
>***Abastraction*** = Reduce complexity + isolate impact of changes 
>
>***Inheritance*** = Eliminate redundant code
>
>***Polymorphism*** = Refactor ugly switch/case statements 
 
--------------------------------------

# How to declare objects

## Object literal 

A object in JavaScript by setting its properties inside curly braces. Object literals property values can be any data types. The syntax to declare a object is setting properties and method inside curly braces:

	const book = {
		title: "Hippie",
		author: "Paulo Coelho",
		year: 2018,
	}

The value of the object could be access by two ways, with: 

`book.title || book.['title']`

## Object constructors

Object contructos are useful whem is necessary to create multiple objects with the same properties an methods. A object constructor is the same as a regular function, the Object constructors can be used with the keyword `new`. It looks like:

	
	function Book(title, author, year) { 
	   this.title = title; 
	   this.author = author; 
	   this.year = year;
	}
	const book1 = new Book ('Hippie', 'Paulo Coelho', '2018');
	const book2 = new Book ('The Alchemist', 'Paulo Coelho', '1988');

	console.log(book1);

Console equals to:

>  Book {
     title: "Hippie", 
     author: "Paulo Coelho", 
     year: "2018"
  }

The objects book1 and book2 create an instance of Book and assigned it to a variable. It can be checked bu the keyword `instanceof`.

	book1 instaceof Book


## Object.create()

Object.create is a method of the master object. This method create a new object using a existing object as the prototype. The syntax about this method looks like: 

	Object.create(proto, [propertiesObject])

The argument proto refers to the newly-created object, propertiesObject is an optional one.

	Let's take a simple example:
	
	const Book = { 
	   summary : function() { 
	      console.log(`${this.title} is written by ${this.author}.`)
	   }
	}const book1 = Object.create(Book);
	book1.author = "Paulo Coelho";
	book1.title = "Hippie";console.log(book1.summary());
	

Console equal to: 

> Hippie is written by Paulo Coelho.
	
# Inheritance

### proto 
### prototype
### Shadowing
### Call e apply


# Class













 

# References 



> Object-oriented Programming in JavaScript: Made Super Simple | Mosh - https://youtu.be/PFmuCDHHpwk
>
> A Guide to Object-Oriented Programming in JavaScript - https://medium.com/better-programming/object-oriented-programming-in-javascript-b3bda28d3e81  